// Code generated by MockGen. DO NOT EDIT.
// Source: email.go

// Package mock_email is a generated GoMock package.
package mock_email

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmailClient is a mock of EmailClient interface.
type MockEmailClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmailClientMockRecorder
}

// MockEmailClientMockRecorder is the mock recorder for MockEmailClient.
type MockEmailClientMockRecorder struct {
	mock *MockEmailClient
}

// NewMockEmailClient creates a new mock instance.
func NewMockEmailClient(ctrl *gomock.Controller) *MockEmailClient {
	mock := &MockEmailClient{ctrl: ctrl}
	mock.recorder = &MockEmailClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailClient) EXPECT() *MockEmailClientMockRecorder {
	return m.recorder
}

// SendInvitation mocks base method.
func (m *MockEmailClient) SendConfirmation(email, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendConfirmation", email, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendInvitation indicates an expected call of SendInvitation.
func (mr *MockEmailClientMockRecorder) SendInvitation(email, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConfirmation", reflect.TypeOf((*MockEmailClient)(nil).SendConfirmation), email, token)
}
